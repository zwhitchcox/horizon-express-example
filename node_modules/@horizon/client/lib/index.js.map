{"version":3,"sources":["../src/index.js"],"names":["defaultHost","window","location","host","defaultSecure","protocol","Horizon","secure","path","lazyWrites","authType","keepalive","WebSocketCtor","WebSocket","tokenStorage","setAuthFromQueryParams","url","socket","handshakeMaker","handshake","bind","subscribe","next","set","token","error","err","test","message","console","remove","horizon","name","sendRequest","currentUser","disconnect","complete","connect","onError","status","subscribeOrObservable","onDisconnected","filter","x","type","onReady","onSocketError","utensils","Object","freeze","_authMethods","_root","_horizonPath","authEndpoint","hasAuthToken","aggregate","model","options","normalizedType","hzRequest","takeWhile","resp","state","observable","length","Socket","clearAuthTokens","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["import 'rxjs/add/observable/of'\nimport 'rxjs/add/observable/from'\nimport 'rxjs/add/operator/catch'\nimport 'rxjs/add/operator/concatMap'\nimport 'rxjs/add/operator/map'\nimport 'rxjs/add/operator/filter'\n\nimport { Collection, UserDataTerm } from './ast'\nimport { HorizonSocket } from './socket'\nimport { authEndpoint, TokenStorage, clearAuthTokens } from './auth'\nimport { aggregate, model } from './model'\n\nconst defaultHost = typeof window !== 'undefined' && window.location &&\n        `${window.location.host}` || 'localhost:8181'\nconst defaultSecure = typeof window !== 'undefined' && window.location &&\n        window.location.protocol === 'https:' || false\n\nfunction Horizon({\n  host = defaultHost,\n  secure = defaultSecure,\n  path = 'horizon',\n  lazyWrites = false,\n  authType = 'unauthenticated',\n  keepalive = 60,\n  WebSocketCtor = WebSocket,\n} = {}) {\n  // If we're in a redirection from OAuth, store the auth token for\n  // this user in localStorage.\n\n  const tokenStorage = new TokenStorage({ authType, path })\n  tokenStorage.setAuthFromQueryParams()\n\n  const url = `ws${secure ? 's' : ''}:\\/\\/${host}\\/${path}`\n  const socket = new HorizonSocket({\n    url,\n    handshakeMaker: tokenStorage.handshake.bind(tokenStorage),\n    keepalive,\n    WebSocketCtor,\n  })\n\n  // Store whatever token we get back from the server when we get a\n  // handshake response\n  socket.handshake.subscribe({\n    next(handshake) {\n      if (authType !== 'unauthenticated') {\n        tokenStorage.set(handshake.token)\n      }\n    },\n    error(err) {\n      if (/JsonWebTokenError|TokenExpiredError/.test(err.message)) {\n        console.error('Horizon: clearing token storage since auth failed')\n        tokenStorage.remove()\n      }\n    },\n  })\n\n  // This is the object returned by the Horizon function. It's a\n  // function so we can construct a collection simply by calling it\n  // like horizon('my_collection')\n  function horizon(name) {\n    return new Collection(sendRequest, name, lazyWrites)\n  }\n\n  horizon.currentUser = () =>\n    new UserDataTerm(horizon, socket.handshake, socket)\n\n  horizon.disconnect = () => {\n    socket.complete()\n  }\n\n  // Dummy subscription to force it to connect to the\n  // server. Optionally provide an error handling function if the\n  // socket experiences an error.\n  // Note: Users of the Observable interface shouldn't need this\n  horizon.connect = (\n    onError = err => { console.error(`Received an error: ${err}`) }\n  ) => {\n    socket.subscribe(\n      () => {},\n      onError\n    )\n  }\n\n  // Either subscribe to status updates, or return an observable with\n  // the current status and all subsequent status changes.\n  horizon.status = subscribeOrObservable(socket.status)\n\n  // Convenience method for finding out when disconnected\n  horizon.onDisconnected = subscribeOrObservable(\n    socket.status.filter(x => x.type === 'disconnected'))\n\n  // Convenience method for finding out when ready\n  horizon.onReady = subscribeOrObservable(\n    socket.status.filter(x => x.type === 'ready'))\n\n  // Convenience method for finding out when an error occurs\n  horizon.onSocketError = subscribeOrObservable(\n    socket.status.filter(x => x.type === 'error'))\n\n  horizon.utensils = {\n    sendRequest,\n    tokenStorage,\n    handshake: socket.handshake,\n  }\n  Object.freeze(horizon.utensils)\n\n  horizon._authMethods = null\n  horizon._root = `http${(secure) ? 's' : ''}://${host}`\n  horizon._horizonPath = `${horizon._root}/${path}`\n  horizon.authEndpoint = authEndpoint\n  horizon.hasAuthToken = tokenStorage.hasAuthToken.bind(tokenStorage)\n  horizon.aggregate = aggregate\n  horizon.model = model\n\n  return horizon\n\n  // Sends a horizon protocol request to the server, and pulls the data\n  // portion of the response out.\n  function sendRequest(type, options) {\n    // Both remove and removeAll use the type 'remove' in the protocol\n    const normalizedType = type === 'removeAll' ? 'remove' : type\n    return socket\n      .hzRequest({ type: normalizedType, options }) // send the raw request\n      .takeWhile(resp => resp.state !== 'complete')\n  }\n}\n\nfunction subscribeOrObservable(observable) {\n  return (...args) => {\n    if (args.length > 0) {\n      return observable.subscribe(...args)\n    } else {\n      return observable\n    }\n  }\n}\n\nHorizon.Socket = HorizonSocket\nHorizon.clearAuthTokens = clearAuthTokens\n\nmodule.exports = Horizon\n"]}